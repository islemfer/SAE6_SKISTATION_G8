pipeline {
    environment { 
        registry = "islemferchichi/projetdevops" 
        registryCredential = 'dockerhub' 
        dockerImage = '' 
    }

    agent any

    stages {
        stage('Nettoyage et compilation Maven') {
            steps {
                // Cette étape va nettoyer et compiler le projet avec Maven
                sh 'mvn clean compile'
            }
        }

        stage('Mockito & JUnit test') {
            steps {
                script {
                    sh 'mvn test'
                }
            }
        }

        stage('SonarQube analyse') {
            steps {
                script {
                    withSonarQubeEnv(installationName: 'sq1') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }

        stage('Nexus') {
            steps {
                script {
                    sh 'mvn deploy -DskipTests'
                }
            }
        }

        stage('Docker Image') { 
            steps { 
                script { 
                    dockerImage = docker.build(registry + ":ImageSpringboot") 
                }
            } 
        }

        stage('Deploy Image') { 
            steps { 
                script { 
                    docker.withRegistry('', registryCredential) { 
                        dockerImage.push() 
                    }
                } 
            }
        }
        
        post {
            failure {
                emailext(
                    subject: "Échec de la construction du projet DevOps",
                    body: "La construction du projet DevOps a échoué. Consultez la console Jenkins pour plus de détails.",
                    to: "islem.ferchichi@esprit.tn" // Adresse e-mail de réception
                )
            }
        }
    }

    stage('Docker Compose') {
        steps {
            sh 'docker compose up -d'
        }
    }

    // stage('Quality Gate') {
    //     steps {
    //        timeout(time: 5, unit: 'MINUTES') {
    //            waitForQualityGate abortPipeline: true
    //        }
    //     }
    // }
}


