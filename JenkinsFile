pipeline {
environment { 
        registry = "islemferchichi/projetdevops" 
        registryCredential = 'dockerhub' 
        dockerImage = '' 
    }

    agent any
    
    stages {

        stage('Nettoyage et compilation Maven') {
            steps {
                // Cette Ã©tape va nettoyer et compiler le projet avec Maven
                sh 'mvn clean compile'
            }
        }

       

        stage('Mockito & JUnit test') {
           steps {
               script {
                sh 'mvn test'
             }
                
            }
        }

        stage('SonarQube analyse') {
             steps {
               script {
            withSonarQubeEnv(installationName: 'sq1') {
                 sh 'mvn sonar:sonar'
             }
        }
                
           }
       }

         stage('Nexus') {
             steps {
                script {
                 //sh 'mvn deploy'
                  sh 'mvn deploy -DskipTests'
              }
                
             }
        }
         stage('Docker Image') { 
            steps { 
                script { 
                    dockerImage = docker.build registry + ":ImageSpringboot" 
                }
            } 
        }
       stage('Deploy Image') { 
            steps { 
                script { 
                    docker.withRegistry( '', registryCredential ) { 
                        dockerImage.push() 
                    }
                } 
            }
        }

        stage('Docker Compose') {
            steps {
                    sh 'docker compose up -d'
            }
        }


     
  stage('Email Notification') {
            steps {
                script {
                    try {
                        emailext (
                            subject: "Jenkins Job - ${currentBuild.result}",
                            body: "This is the email body.",
                            to: "islem.ferchichi@esprit.tn",
                        )
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
    }
}

